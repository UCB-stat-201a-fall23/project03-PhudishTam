---
title: "Solution to HW1"
author: "Phudish Prateepamornkul"
format: pdf
editor: visual
include-in-header: 
  text: |
    \usepackage{fvextra}
    \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
---
# Question 1(a)
We have that the transition matrix will be 
$$
\begin{pmatrix}
0.2 & 0.7 & 0.1\\
0.2 & 0.5 & 0.3\\
0.2 & 0.4 & 0.4
\end{pmatrix}
$$

# Question 1(b)
```{python}
import numpy as np
import matplotlib.pyplot as plt 
P = np.array([[0.2,0.7,0.1],[0.2,0.5,0.3],[0.2,0.4,0.4]])
state = [1,2,3]
X_0 = np.array([[1,0,0]])
X_0 = np.reshape(X_0,(3,1))
number_time = 100000
next_state = []
for i in range(number_time):
    X_1 = np.random.choice(state, p = (X_0.T@P).flatten())
    next_state.append(X_1)
plt.hist(next_state,bins = 30)
plt.xlabel("State")
plt.ylabel("Number Of Time")
plt.title("Histogram of state we get")
plt.show()
```

# Question 2(a)
```{python}
import scipy
identity = np.identity(np.shape(P)[0])
term_1 = P.T - identity
solution =  scipy.linalg.null_space(term_1)
normalized_solution = solution/(np.sum(solution))
print(f"The stationary state is : {normalized_solution}")
pi_0 = np.array([[1,0,0]])
pi_0 = np.reshape(pi_0,(3,1))
```


# Question 2(b)
```{python}
number_of_i = 500
value_i =  np.arange(1,number_of_i)
pi_i = [pi_0]
for i in range(2,number_of_i):
    pi_i.append(((pi_0.T)@np.linalg.matrix_power(P,i)).T)
difference = []
for i in range(len(value_i)):
    difference.append(np.linalg.norm(pi_i[i] - normalized_solution))
plt.plot(value_i,difference)
plt.xlabel("Value of i")
plt.ylabel("Norm Difference")
plt.yscale("log")
plt.show()
```

# Question 3(a)
```{python}
X_0_start_1 = np.array([1, 0, 0])
X_0_start_2 = np.array([0, 1, 0])
number_time = 100000
state = [1, 2, 3]
P = np.array([[0.2, 0.7, 0.1], [0.2, 0.5, 0.3], [0.2, 0.4, 0.4]])
def arrival_time(initial_probability):
    number_steps = 0
    current_state = np.random.choice(state, p = initial_probability)
    while current_state !=3 :
        state_1 =  np.zeros(3)
        state_1[current_state-1] = 1
        current_state = np.random.choice(state,p = state_1@P)
        number_steps += 1
    return number_steps
first_time = [arrival_time(initial_probability=X_0_start_1) for j in range(number_time)]
second_time = [arrival_time(initial_probability=X_0_start_2) for j in range(number_time)] 
plt.hist(first_time,bins = 30)
plt.xlabel("Stopping Time")
plt.ylabel("Frequency")
plt.title("Histogram of the arrival time for X_{0} = 1")
plt.show()
plt.hist(second_time,bins = 30)
plt.xlabel("Stopping Time")
plt.ylabel("Frequency")
plt.title("Histogram of the arrival time for X_{0} = 2")
plt.show()
print(f"The mean for the stopping time when initial is 1 : {np.mean(first_time)}")
print(f"The mean for the stopping time when initial is 2 : {np.mean(second_time)}")    
```

# Question 3(b)

We have that $\mu_{1} = 1+ \sum_{j=1}^{3} p_{1j}\mu_{j}$ and $\mu_{2} = 1+ \sum_{j=1}^{3} p_{2j}\mu_{j}$ So we have that $\mu_{1} = 1 + p_{11}\mu_{1} + p_{12}\mu_{2}$ and $\mu_{2} = 1 + p_{21}\mu_{1} + p_{22}\mu_{2}$ and $p_{11} = 0.2, p_{12} = 0.7 , p_{21} = 0.2 , p_{22} = 0.5$. So we have $0.8\mu_{1} - 0.7\mu_{2} = 1$ and $-0.2\mu_{1}+0.5\mu_{2} = 1$ then we multiply $4$ to the second equation and we add them up we will have that $1.3\mu_{2} = 5$ so $\mu_{2} = \frac{50}{13} = 3.846$ and $\mu_{1} = \frac{60}{13} = 4.6153$ which is close to what we have on part(a)